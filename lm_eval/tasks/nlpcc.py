import transformers.data.metrics.squad_metrics as squad_metrics
from lm_eval.base import Task, rf, mean
from itertools import zip_longest
from lm_eval import metrics
import jieba
from nltk.translate.bleu_score import sentence_bleu
from nltk.translate.chrf_score import sentence_chrf

class NLPCC(Task):
    VERSION = 0
    DATASET_PATH = "lm_eval/datasets/nlpcc"
    DATASET_NAME = 'nlpcc'

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return False

    def has_test_docs(self):
        return True

    def training_docs(self):
        pass

    def validation_docs(self):
        pass

    def test_docs(self):
        dataset=self.dataset["test"]
        a=[]
        for i,item in enumerate(dataset):
            if i <=20:
                a.append(item)
        return a

    def doc_to_text(self, doc):
        # TODO: Format the query prompt portion of the document example.
        txt=f"请以概括的语言总结以下文本：\"{doc['content']}\"。"
        #txt=f"use one sentecen to conclude the following text:\"{doc['content']}\"。\n\n"
        return txt

    def doc_to_target(self, doc):
        # TODO: Fill in the `target` ("gold answer") variable.
        # The prepended `" "` is required to space out the `doc_to_text` and
        # `doc_to_target` strings.
        target = doc["title"]
        return " " + target


    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        #cont_request = rf.greedy_until(ctx, ["[EOS]"])
        #cont_request = rf.greedy_until("i am colin, and i am an artist, and my favourate food is ",["\n"])
        #cont_request = rf.greedy_until(ctx, ["|endoftext|"])
        cont_request = rf.greedy_until(ctx, ["\n"])
        return cont_request

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        pred=results[0]
        gold=doc["title"]
        pred_fenci = ' '.join(jieba.cut(pred))
        gold_fenci = ' '.join(jieba.cut(gold))
        reference = [] 
        candidate = []
        reference.append(gold_fenci.split())
        candidate = (pred_fenci.split())
        blue_score = sentence_bleu(reference, candidate,weights=(0.25, 0.25, 0.25, 0.25))
        reference2=(gold_fenci.split())
        chrf_score=sentence_chrf(reference2, candidate, min_len=1, max_len=2, beta=2)

        return {
            "blue": blue_score,
            "chrf":chrf_score,
        }

        
    def aggregation(self):
        return {
            "blue": mean,
            "chrf":mean,
        }

        
    def higher_is_better(self):
        return {
            "blue": True,
            "chrf": True,
        }














